{"version":3,"sources":["logo.svg","views/Home/Home.styles.js","theme.js","views/Home/Home.js","components/Nav/Nav.styles.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js","assets/hero_bg.png"],"names":["module","exports","HeroTitle","styled","h1","HeroSubtitle","div","HeroWrapper","HeroBackground","PageContentWrapper","Hero","Home","NavWrapper","NavLink","NavLinks","Nav","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,84BCIpC,IAAMC,EAAYC,IAAOC,GAAV,ICJJ,WDaLC,EAAeF,IAAOG,IAAV,ICbP,WDuBLC,EAAcJ,IAAOG,IAAV,IAEJE,KAOPC,EAAqBN,IAAOG,IAAV,KExBzBI,EAAO,WACX,OACE,kBAACH,EAAD,KACE,kBAACE,EAAD,KACE,kBAACP,EAAD,kGAGA,kBAACG,EAAD,uGAcOM,EANK,WAClB,OACE,kBAAC,EAAD,O,ooBCtBG,IAAMC,EAAaT,IAAOG,IAAV,IFHL,WEgBLO,EAAUV,IAAOG,IAAV,KASPQ,EAAWX,IAAOG,IAAV,KCLNS,EAbI,WACjB,OACE,kBAACH,EAAD,WAEE,kBAACE,EAAD,KACE,kBAACD,EAAD,iBACA,kBAACA,EAAD,aACA,kBAACA,EAAD,mBCEOG,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BrC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.50595a42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled from 'styled-components';\nimport HeroBackground from '../../assets/hero_bg.png'\nimport { BLACK } from '../../theme';\n\nexport const HeroTitle = styled.h1`\n  font-family: 'Playfair Display';\n  font-size: 58px;\n  line-height: 1.5;\n  margin: 0;\n  color: ${BLACK};\n  font-weight: 800;\n`;\n\nexport const HeroSubtitle = styled.div`\n  color: ${BLACK};\n  font-family: 'Open Sans';\n  font-weight: Light;\n  letter-spacing: 2px;\n  line-height: 1.5;\n  font-size: 20px;\n  padding-top: 25px;\n`;\n\nexport const HeroWrapper = styled.div`\n  min-height: 100vh;\n  background: url(${HeroBackground}) no-repeat top;\n  background-size: cover;\n  background-blend-mode: lighten;\n  display: flex;\n  align-items: center;\n`;\n\nexport const PageContentWrapper = styled.div`\n  width: 80%;\n  margin: 0 auto;\n`;","export const BLACK = `#2D3435`;\n\nexport const EXTRA_LARGE = `1200px`;\nexport const LARGE = `992px`;\nexport const TABLET = `768px`;\nexport const MOBILE = `576px`;\n","import React from 'react';\nimport {\n  HeroTitle,\n  HeroWrapper,\n  PageContentWrapper,\n  HeroSubtitle\n} from './Home.styles'\n\nconst Hero = () => {\n  return (\n    <HeroWrapper>\n      <PageContentWrapper>\n        <HeroTitle>\n          hi! I'm julia bujalski, boston based web designer currently working at minerva analytics.\n        </HeroTitle>\n        <HeroSubtitle>\n          This site is under construction at the moment. Thanks for bearing with this creative vomit.\n        </HeroSubtitle>\n      </PageContentWrapper>\n    </HeroWrapper>\n  )\n}\n\nexport const Home = () => {\n  return (\n    <Hero />\n  )\n}\n\nexport default Home;","import styled from 'styled-components';\nimport { BLACK } from '../../theme';\n\nexport const NavWrapper = styled.div`\n  position: fixed;\n  width: 100%;\n  font-family: 'Playfair Display', serif;\n  font-weight: 700;\n  text-align: left;\n  padding: 25px;\n  font-size: 25px;\n  color: ${BLACK};\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const NavLink = styled.div`\n  font-size: 18px;\n  font-family: 'Open Sans', sans-serif;\n  font-weight: Semibold;\n  text-transform: uppercase;\n  letter-spacing: 3px;\n  padding: 0px 10px;\n`;\n\nexport const NavLinks = styled.div`\n  display: flex;\n  margin-right: 25px;\n`;\n","import React from 'react';\nimport {\n  NavWrapper,\n  NavLink,\n  NavLinks\n} from './Nav.styles';\n\nexport const Nav = () => {\n  return (\n    <NavWrapper>\n      buj\n      <NavLinks>\n        <NavLink>about me</NavLink>\n        <NavLink>work</NavLink>\n        <NavLink>contact</NavLink>\n      </NavLinks>\n    </NavWrapper>\n  )\n}\n\nexport default Nav;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Home from './views/Home';\nimport Nav from './components/Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hero_bg.a308ee13.png\";"],"sourceRoot":""}